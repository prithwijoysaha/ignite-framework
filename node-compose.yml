version: '3.8' # Version of Docker Compose file, compatible with Docker Swarm

services:
    # Node.js Application Service
    node-app:
        image: node:22-alpine # Latest Node.js LTS (22) using lightweight Alpine image
        container_name: ams-node-app # Container name, useful for logs and monitoring
        working_dir: /usr/src/app # Working directory inside the container
        environment:
            NODE_ENV: production # Set environment to production for better performance
            PORT: 5000 # Port used by Node.js app internally
        build:
            context: . # Build context (current folder)
            dockerfile: Dockerfile # Dockerfile to build the image
        ports:
            - '5000:5000' # Map host port 5000 to container port 5000
        restart: unless-stopped # Container will always restart unless manually stopped

        deploy:
            replicas: 1 # Number of replicas for high availability in Docker Swarm
            restart_policy:
                condition: on-failure # Restart container if it exits with error
                delay: 5s # Delay before restarting
            resources:
                limits:
                    memory: 512M # Maximum memory container can use
                    cpus: '0.5' # Maximum CPU (half a core)
                reservations:
                    memory: 256M # Memory reserved for this container
                    cpus: '0.2' # Minimum CPU guaranteed (one-fifth core)

        logging:
            driver: 'json-file' # Use JSON logging driver
            options:
                max-size: '10m' # Maximum log file size before rotation
                max-file: '3' # Keep last 3 rotated log files

        healthcheck:
            test: ['CMD-SHELL', 'curl -f http://localhost:5000/ || exit 1']
            interval: 30s
            timeout: 5s
            retries: 3
            start_period: 10s

        # Notes:
    # - Healthcheck ensures Docker restarts container if app becomes unresponsive
    # - NODE_ENV=production ensures no dev dependencies and better performance
    # - Alpine image keeps image size small
    # - Port mapping allows external access
    # - Resource limits protect the host machine from container abuse
    # - Logging rotation prevents disk full issues in production
